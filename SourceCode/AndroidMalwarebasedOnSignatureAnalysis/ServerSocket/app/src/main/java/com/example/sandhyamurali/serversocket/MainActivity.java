package com.example.sandhyamurali.serversocket;

import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.Signature;
import android.net.Uri;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.widget.TextView;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URL;
import java.util.List;

import static android.content.Intent.ACTION_VIEW;
import static android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET;
import static android.content.Intent.FLAG_ACTIVITY_MULTIPLE_TASK;
import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
import static android.content.Intent.FLAG_ACTIVITY_NO_HISTORY;


public class MainActivity extends AppCompatActivity {

    TextView info, msg;
    String message = "";
    ServerSocket serverSocket;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        info = (TextView) findViewById(R.id.info);
        msg = (TextView) findViewById(R.id.msg);

        Thread socketServerThread = new Thread(new SocketServerThread());
        socketServerThread.start();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        if (serverSocket != null) {
            try {
                serverSocket.close();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }

    private class SocketServerThread extends Thread {

        final int SocketServerPORT = 8080;
        int count = 0;

        @Override
        public void run() {
            Socket socket = null;
            DataInputStream dataInputStream = null;
            DataOutputStream dataOutputStream = null;


           // ObjectOutputStream oos=null;
           // ObjectInputStream ois=null;

            try {
                serverSocket = new ServerSocket();
                serverSocket.setReuseAddress(true);
                serverSocket.bind(new InetSocketAddress(SocketServerPORT));
                MainActivity.this.runOnUiThread(new Runnable() {

                    @Override
                    public void run() {
                        info.setText("\n"+"\n"+"            I'm waiting here: "
                                + serverSocket.getLocalPort()+"\n"+"\n");
                    }
                });

                while (true) {
                    socket = serverSocket.accept();

                    /*
                    ois=new ObjectInputStream(socket.getInputStream());
                    oos=new ObjectOutputStream(socket.getOutputStream());


                    String strMessage=(String)ois.readObject();
                    message=strMessage;

                    */


                    dataInputStream = new DataInputStream(
                            socket.getInputStream());
                    dataOutputStream = new DataOutputStream(
                            socket.getOutputStream());

                    String messageFromClient = "";
                   messageFromClient = dataInputStream.readUTF();
                   String[] splitMessage=messageFromClient.split(" ");

                   count++;
                   message += "List of applications from client"
                            + ":" + "\n";

                    message+="\n";


                    for(int i=0;i<splitMessage.length;i++)
                    {
                        message+=""+(i+1)+"     "+splitMessage[i].split(",")[0]+"\n";
                    }


                   String installedapps="";
                   String notinstalledapps="";

                    for(String appdetails:splitMessage)
                    {
                        String[] SignaturePermissions=appdetails.split(",");
                        final Uri uriBuilder = Uri.parse("https://play.google.com/store/apps/details?id="+ SignaturePermissions[0]);
                        URL url =new URL(uriBuilder.toString());
                        HttpURLConnection connection = null;
                        connection = (HttpURLConnection) url.openConnection();
                        int code = connection.getResponseCode();

                        if(code!=HttpURLConnection.HTTP_OK)
                        {
                            notinstalledapps+=SignaturePermissions[0]+" ";
                            continue;

                        }

                        boolean isAppInstalled = appInstalledOrNot(SignaturePermissions[0]);

                        if(!isAppInstalled)
                        {
                            Intent marketIntent = new Intent(ACTION_VIEW, Uri.parse("market://details?id=" + SignaturePermissions[0]));
                            marketIntent.addFlags(FLAG_ACTIVITY_NO_HISTORY | FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET|FLAG_ACTIVITY_MULTIPLE_TASK|FLAG_ACTIVITY_NEW_TASK);
                            startActivity(marketIntent);


                            while(true)
                            {
                                if(!appInstalledOrNot(SignaturePermissions[0]))
                                {
                                    continue;
                                }

                                else
                                    break;
                            }


                            PackageManager pkg = getPackageManager();
                            List<PackageInfo> signatures = pkg.getInstalledPackages(PackageManager.GET_SIGNATURES);

                            for(PackageInfo apps:signatures)
                            {
                                if(SignaturePermissions[0].equals(apps.packageName))
                                {
                                    Signature[] signature=apps.signatures;

                                    int hashcode=0;
                                    for(Signature sig:signature)
                                    {
                                        hashcode=sig.hashCode();
                                    }

                                    if(Integer.parseInt(SignaturePermissions[1])==hashcode)
                                    {
                                        GetRating rating=new GetRating(apps.packageName);
                                        String RatingApplication="";
                                        try
                                        {
                                            RatingApplication = rating.execute().get();

                                            if(Double.valueOf(RatingApplication)<4)
                                            {
                                                notinstalledapps+=apps.packageName+" ";
                                            }

                                            else
                                            {
                                                installedapps+=apps.packageName+" ";

                                            }
                                        }

                                        catch (Exception e)
                                        {
                                            e.printStackTrace();
                                        }

                                    }

                                    else
                                        notinstalledapps+=apps.packageName+" ";

                                    break;
                                }
                            }
                        }

                        else
                        {
                            PackageManager pkg = getPackageManager();
                            List<PackageInfo> signatures = pkg.getInstalledPackages(PackageManager.GET_SIGNATURES);

                            for(PackageInfo apps:signatures)
                            {
                                if(SignaturePermissions[0].equals(apps.packageName))
                                {

                                    Signature[] signature=apps.signatures;

                                    int hashcode=0;
                                    for(Signature sig:signature)
                                    {
                                        hashcode=sig.hashCode();
                                    }

                                    if(Integer.parseInt(SignaturePermissions[1])==hashcode)
                                    {
                                        installedapps+=apps.packageName+" ";
                                    }

                                    else
                                        notinstalledapps+=apps.packageName+" ";

                                    break;
                                }
                            }

                        }

                    }




                    MainActivity.this.runOnUiThread(new Runnable() {

                        @Override
                        public void run() {
                            msg.setText(message);


                        }
                    });

                     if(installedapps.length()==0)
                         installedapps="None";

                    if(notinstalledapps.length()==0)
                         notinstalledapps="None";
                    String msgReply = installedapps+"-"+notinstalledapps;
                     dataOutputStream.writeUTF(msgReply);

                    //oos.writeObject("hello client");

                }
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
                final String errMsg = e.toString();
                MainActivity.this.runOnUiThread(new Runnable() {

                    @Override
                    public void run() {
                        msg.setText(errMsg);
                    }
                });

            }  finally {
                if (socket != null) {
                    try {
                        socket.close();
                    } catch (IOException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                }

                if (dataInputStream != null) {
                    try {
                        dataInputStream.close();
                    } catch (IOException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                }

                if (dataOutputStream != null) {
                    try {
                        dataOutputStream.close();
                    } catch (IOException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                }

                /*
                if (oos != null) {
                    try {
                        oos.close();
                    } catch (IOException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                }

                if (ois != null) {
                    try {
                        ois.close();
                    } catch (IOException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                }
                */
            }
        }

    }

    private boolean appInstalledOrNot(String uri) {
        PackageManager pm = getPackageManager();
        try {
            pm.getPackageInfo(uri, PackageManager.GET_ACTIVITIES);
            return true;
        } catch (PackageManager.NameNotFoundException e) {
        }

        return false;
    }



}
